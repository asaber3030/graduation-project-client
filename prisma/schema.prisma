generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_LOCALHOST")
}

enum Gender {
  Male
  Female
}

model Hospital {
  id          Int    @id @default(autoincrement())
  name        String
  logo        String
  description String
  location    String

  doctors          Doctor[]
  departments      Department[]
  employees        Employee[]
  examinationForms ExaminationForm[]
  admins           Admin[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("hospitals")
}

model Patient {
  id                    Int     @id @default(autoincrement())
  name                  String
  password              String
  phoneNumber           String  @unique
  email                 String  @unique
  nationalId            String  @unique
  emergencyContactName  String
  emergencyContactPhone String
  allergies             String
  gender                Gender
  image                 String?
  nationalIdImage       String?
  birthCertificateImage String?

  maritalStatus String?

  birthDate DateTime?
  age       Int

  adresses         Address[]
  vaccinations     PatientVaccination[]
  medications      PatientMedication[]
  prescriptions    Prescription[]
  examinationForms ExaminationForm[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("patients")
}

model PatientVaccination {
  id           Int      @id @default(autoincrement())
  patientId    Int
  vaccineName  String
  vaccineDate  DateTime
  vaccineNotes String

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("patients_vacanations")
}

model PatientMedication {
  id         Int      @id @default(autoincrement())
  dosage     String
  startDate  DateTime
  endDate    DateTime
  notes      String
  medicineId Int
  patientId  Int

  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  medicine Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("patients_medications")
}

model Prescription {
  id        Int     @id @default(autoincrement())
  patientId Int
  doctorId  Int
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor    Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  PrescriptionItem PrescriptionItem[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("prescriptions")
}

model PrescriptionItem {
  id             Int    @id @default(autoincrement())
  quantity       Int
  notes          String
  timesPerDay    Int
  medicineId     Int
  prescriptionId Int

  medicine     Medicine     @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("prescription_items")
}

model Admin {
  id          Int    @id @default(autoincrement())
  name        String
  password    String
  phoneNumber String @unique
  email       String @unique
  hospitalId  Int
  hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("admins")
}

model Address {
  id          Int     @id @default(autoincrement())
  phoneNumber String  @unique
  streetName  String
  notes       String
  homeNumber  String
  patientId   Int
  patient     Patient @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("patients_addresses")
}

model Doctor {
  id Int @id @default(autoincrement())

  username     String @unique
  name         String
  jobTitle     String
  password     String
  phoneNumber  String @unique
  email        String @unique
  hospitalId   Int
  departmentId Int

  hospital     Hospital       @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department   Department     @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  presepctions Prescription[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("doctors")
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  hospitalId  Int
  hospital    Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  doctors          Doctor[]
  emloyees         Employee[]
  examinationForms ExaminationForm[]

  @@map("departments")
}

model Inventory {
  id           Int    @id @default(autoincrement())
  name         String
  description  String
  hospitalId   Int
  departmentId Int

  medicine Medicine[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("inventories")
}

model DosageForm {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  medicine Medicine[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("medicine_dosage_forms")
}

model Medicine {
  id           Int @id @default(autoincrement())
  dosageFormId Int
  inventoryId  Int

  enName               String
  arName               String
  enDescription        String
  arDescription        String
  activeIngredients    String
  totalTablets         Int
  bgColor              String?    @default("white")
  textColor            String?    @default("black")
  notes                String?
  barcode              String?
  image                String?
  concentration        String?
  dosageForm           DosageForm @relation(fields: [dosageFormId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  price                Float
  numberOfTape         Int        @default(1)
  numberOfPillsPerTape Int        @default(0)
  expirationDate       DateTime?

  inventory          Inventory            @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ingredients        MedicineIngredient[]
  patientMedications PatientMedication[]
  prescriptionItems  PrescriptionItem[]

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("medicines")
}

model MedicineIngredient {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  medicineId  Int
  medicine    Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("medicine_ingredients")
}

model Employee {
  id          Int    @id @default(autoincrement())
  name        String
  username    String @unique
  phoneNumber String @unique
  email       String @unique
  password    String
  jobTitle    String

  hospitalId   Int
  departmentId Int

  hospital   Hospital   @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("employees")
}

model ExaminationForm {
  id Int @id @default(autoincrement())

  date             DateTime
  hasBloodPressure Boolean  @default(false)
  hasBloodSugar    Boolean  @default(false)

  hospitalId   Int
  departmentId Int
  patientId    Int

  patient    Patient    @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hospital   Hospital   @relation(fields: [hospitalId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @db.Timestamp()

  @@map("examination_forms")
}
